// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.30.2
// source: terrain.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TerrainServiceClient is the client API for TerrainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TerrainServiceClient interface {
	// GetTerrainTile returns terrain data for a specific tile
	GetTerrainTile(ctx context.Context, in *TerrainTileRequest, opts ...grpc.CallOption) (*TerrainTileResponse, error)
	// GetTerrainChunk returns multiple terrain tiles as a chunk
	GetTerrainChunk(ctx context.Context, in *TerrainChunkRequest, opts ...grpc.CallOption) (*TerrainChunkResponse, error)
	// UpdateTerrainParameters updates generation parameters
	UpdateTerrainParameters(ctx context.Context, in *TerrainParametersRequest, opts ...grpc.CallOption) (*TerrainParametersResponse, error)
	// StreamTerrainUpdates provides a stream of terrain updates
	StreamTerrainUpdates(ctx context.Context, in *TerrainStreamRequest, opts ...grpc.CallOption) (TerrainService_StreamTerrainUpdatesClient, error)
}

type terrainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTerrainServiceClient(cc grpc.ClientConnInterface) TerrainServiceClient {
	return &terrainServiceClient{cc}
}

func (c *terrainServiceClient) GetTerrainTile(ctx context.Context, in *TerrainTileRequest, opts ...grpc.CallOption) (*TerrainTileResponse, error) {
	out := new(TerrainTileResponse)
	err := c.cc.Invoke(ctx, "/terrain.TerrainService/GetTerrainTile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terrainServiceClient) GetTerrainChunk(ctx context.Context, in *TerrainChunkRequest, opts ...grpc.CallOption) (*TerrainChunkResponse, error) {
	out := new(TerrainChunkResponse)
	err := c.cc.Invoke(ctx, "/terrain.TerrainService/GetTerrainChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terrainServiceClient) UpdateTerrainParameters(ctx context.Context, in *TerrainParametersRequest, opts ...grpc.CallOption) (*TerrainParametersResponse, error) {
	out := new(TerrainParametersResponse)
	err := c.cc.Invoke(ctx, "/terrain.TerrainService/UpdateTerrainParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terrainServiceClient) StreamTerrainUpdates(ctx context.Context, in *TerrainStreamRequest, opts ...grpc.CallOption) (TerrainService_StreamTerrainUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TerrainService_ServiceDesc.Streams[0], "/terrain.TerrainService/StreamTerrainUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &terrainServiceStreamTerrainUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TerrainService_StreamTerrainUpdatesClient interface {
	Recv() (*TerrainTileResponse, error)
	grpc.ClientStream
}

type terrainServiceStreamTerrainUpdatesClient struct {
	grpc.ClientStream
}

func (x *terrainServiceStreamTerrainUpdatesClient) Recv() (*TerrainTileResponse, error) {
	m := new(TerrainTileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TerrainServiceServer is the server API for TerrainService service.
// All implementations must embed UnimplementedTerrainServiceServer
// for forward compatibility
type TerrainServiceServer interface {
	// GetTerrainTile returns terrain data for a specific tile
	GetTerrainTile(context.Context, *TerrainTileRequest) (*TerrainTileResponse, error)
	// GetTerrainChunk returns multiple terrain tiles as a chunk
	GetTerrainChunk(context.Context, *TerrainChunkRequest) (*TerrainChunkResponse, error)
	// UpdateTerrainParameters updates generation parameters
	UpdateTerrainParameters(context.Context, *TerrainParametersRequest) (*TerrainParametersResponse, error)
	// StreamTerrainUpdates provides a stream of terrain updates
	StreamTerrainUpdates(*TerrainStreamRequest, TerrainService_StreamTerrainUpdatesServer) error
	mustEmbedUnimplementedTerrainServiceServer()
}

// UnimplementedTerrainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTerrainServiceServer struct {
}

func (UnimplementedTerrainServiceServer) GetTerrainTile(context.Context, *TerrainTileRequest) (*TerrainTileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTerrainTile not implemented")
}
func (UnimplementedTerrainServiceServer) GetTerrainChunk(context.Context, *TerrainChunkRequest) (*TerrainChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTerrainChunk not implemented")
}
func (UnimplementedTerrainServiceServer) UpdateTerrainParameters(context.Context, *TerrainParametersRequest) (*TerrainParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTerrainParameters not implemented")
}
func (UnimplementedTerrainServiceServer) StreamTerrainUpdates(*TerrainStreamRequest, TerrainService_StreamTerrainUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTerrainUpdates not implemented")
}
func (UnimplementedTerrainServiceServer) mustEmbedUnimplementedTerrainServiceServer() {}

// UnsafeTerrainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TerrainServiceServer will
// result in compilation errors.
type UnsafeTerrainServiceServer interface {
	mustEmbedUnimplementedTerrainServiceServer()
}

func RegisterTerrainServiceServer(s grpc.ServiceRegistrar, srv TerrainServiceServer) {
	s.RegisterService(&TerrainService_ServiceDesc, srv)
}

func _TerrainService_GetTerrainTile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerrainTileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerrainServiceServer).GetTerrainTile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terrain.TerrainService/GetTerrainTile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerrainServiceServer).GetTerrainTile(ctx, req.(*TerrainTileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerrainService_GetTerrainChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerrainChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerrainServiceServer).GetTerrainChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terrain.TerrainService/GetTerrainChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerrainServiceServer).GetTerrainChunk(ctx, req.(*TerrainChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerrainService_UpdateTerrainParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerrainParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerrainServiceServer).UpdateTerrainParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terrain.TerrainService/UpdateTerrainParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerrainServiceServer).UpdateTerrainParameters(ctx, req.(*TerrainParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerrainService_StreamTerrainUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TerrainStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TerrainServiceServer).StreamTerrainUpdates(m, &terrainServiceStreamTerrainUpdatesServer{stream})
}

type TerrainService_StreamTerrainUpdatesServer interface {
	Send(*TerrainTileResponse) error
	grpc.ServerStream
}

type terrainServiceStreamTerrainUpdatesServer struct {
	grpc.ServerStream
}

func (x *terrainServiceStreamTerrainUpdatesServer) Send(m *TerrainTileResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TerrainService_ServiceDesc is the grpc.ServiceDesc for TerrainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TerrainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terrain.TerrainService",
	HandlerType: (*TerrainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTerrainTile",
			Handler:    _TerrainService_GetTerrainTile_Handler,
		},
		{
			MethodName: "GetTerrainChunk",
			Handler:    _TerrainService_GetTerrainChunk_Handler,
		},
		{
			MethodName: "UpdateTerrainParameters",
			Handler:    _TerrainService_UpdateTerrainParameters_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTerrainUpdates",
			Handler:       _TerrainService_StreamTerrainUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "terrain.proto",
}
