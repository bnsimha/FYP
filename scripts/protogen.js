const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// In a real project, this script would use the protoc compiler to generate
// TypeScript and Go code from the .proto file. Since we don't have protoc
// available in the WebContainer environment, this is a mock implementation.

console.log('Generating TypeScript and Go code from proto definitions...');

// Simulating the creation of the generated Go files
function generateGoCode() {
  console.log('Generating Go code...');
  
  // Create the pb directory if it doesn't exist
  const pbDir = path.join(__dirname, '../backend/pb');
  if (!fs.existsSync(pbDir)) {
    fs.mkdirSync(pbDir, { recursive: true });
  }
  
  // Create a stub Go file (in a real project, this would be generated by protoc)
  const goStub = `
// Code generated by protoc-gen-go. DO NOT EDIT.
package pb

// This is a stub file that would normally be generated by protoc with the Go plugin.
// In a real project, you would run:
// protoc --go_out=. --go-grpc_out=. terrain.proto
`;
  
  fs.writeFileSync(path.join(pbDir, 'terrain.pb.go'), goStub);
  fs.writeFileSync(path.join(pbDir, 'terrain_grpc.pb.go'), goStub);
  
  console.log('Go code generated successfully');
}

// Simulating the creation of the generated TypeScript files
function generateTypeScriptCode() {
  console.log('Generating TypeScript code...');
  
  // Create the pb directory if it doesn't exist
  const pbDir = path.join(__dirname, '../lib/grpc/generated');
  if (!fs.existsSync(pbDir)) {
    fs.mkdirSync(pbDir, { recursive: true });
  }
  
  // Create a stub TypeScript file (in a real project, this would be generated by protoc)
  const tsStub = `
// Code generated by protoc-gen-ts. DO NOT EDIT.
export namespace terrain {
  // This is a stub file that would normally be generated by protoc with the TypeScript plugin.
  // In a real project, you would run:
  // protoc --ts_out=. terrain.proto
}
`;
  
  fs.writeFileSync(path.join(pbDir, 'terrain.ts'), tsStub);
  
  console.log('TypeScript code generated successfully');
}

// Main function to run the generation process
function main() {
  try {
    // Copy the proto file to the appropriate locations
    const terrainProto = fs.readFileSync(path.join(__dirname, '../terrain.proto'), 'utf8');
    
    // Copy to backend
    const backendProtoDir = path.join(__dirname, '../backend/proto');
    if (!fs.existsSync(backendProtoDir)) {
      fs.mkdirSync(backendProtoDir, { recursive: true });
    }
    fs.writeFileSync(path.join(backendProtoDir, 'terrain.proto'), terrainProto);
    
    // Generate the code
    generateGoCode();
    generateTypeScriptCode();
    
    console.log('Proto generation completed successfully!');
  } catch (error) {
    console.error('Error generating proto code:', error);
    process.exit(1);
  }
}

// Run the main function
main();