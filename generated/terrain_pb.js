// source: terrain.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.terrain.TerrainChunkRequest', null, global);
goog.exportSymbol('proto.terrain.TerrainChunkResponse', null, global);
goog.exportSymbol('proto.terrain.TerrainParametersRequest', null, global);
goog.exportSymbol('proto.terrain.TerrainParametersResponse', null, global);
goog.exportSymbol('proto.terrain.TerrainStreamRequest', null, global);
goog.exportSymbol('proto.terrain.TerrainTileRequest', null, global);
goog.exportSymbol('proto.terrain.TerrainTileResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.terrain.TerrainTileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.terrain.TerrainTileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.terrain.TerrainTileRequest.displayName = 'proto.terrain.TerrainTileRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.terrain.TerrainTileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.terrain.TerrainTileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.terrain.TerrainTileResponse.displayName = 'proto.terrain.TerrainTileResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.terrain.TerrainChunkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.terrain.TerrainChunkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.terrain.TerrainChunkRequest.displayName = 'proto.terrain.TerrainChunkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.terrain.TerrainChunkResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.terrain.TerrainChunkResponse.repeatedFields_, null);
};
goog.inherits(proto.terrain.TerrainChunkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.terrain.TerrainChunkResponse.displayName = 'proto.terrain.TerrainChunkResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.terrain.TerrainParametersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.terrain.TerrainParametersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.terrain.TerrainParametersRequest.displayName = 'proto.terrain.TerrainParametersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.terrain.TerrainParametersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.terrain.TerrainParametersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.terrain.TerrainParametersResponse.displayName = 'proto.terrain.TerrainParametersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.terrain.TerrainStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.terrain.TerrainStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.terrain.TerrainStreamRequest.displayName = 'proto.terrain.TerrainStreamRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.terrain.TerrainTileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.terrain.TerrainTileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.terrain.TerrainTileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.terrain.TerrainTileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
x: jspb.Message.getFieldWithDefault(msg, 1, 0),
z: jspb.Message.getFieldWithDefault(msg, 2, 0),
resolution: jspb.Message.getFieldWithDefault(msg, 3, 0),
lod: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.terrain.TerrainTileRequest}
 */
proto.terrain.TerrainTileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.terrain.TerrainTileRequest;
  return proto.terrain.TerrainTileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.terrain.TerrainTileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.terrain.TerrainTileRequest}
 */
proto.terrain.TerrainTileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZ(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResolution(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.terrain.TerrainTileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.terrain.TerrainTileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.terrain.TerrainTileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.terrain.TerrainTileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getZ();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getResolution();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getLod();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.terrain.TerrainTileRequest.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainTileRequest} returns this
 */
proto.terrain.TerrainTileRequest.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 z = 2;
 * @return {number}
 */
proto.terrain.TerrainTileRequest.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainTileRequest} returns this
 */
proto.terrain.TerrainTileRequest.prototype.setZ = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 resolution = 3;
 * @return {number}
 */
proto.terrain.TerrainTileRequest.prototype.getResolution = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainTileRequest} returns this
 */
proto.terrain.TerrainTileRequest.prototype.setResolution = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 lod = 4;
 * @return {number}
 */
proto.terrain.TerrainTileRequest.prototype.getLod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainTileRequest} returns this
 */
proto.terrain.TerrainTileRequest.prototype.setLod = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.terrain.TerrainTileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.terrain.TerrainTileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.terrain.TerrainTileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.terrain.TerrainTileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
x: jspb.Message.getFieldWithDefault(msg, 1, 0),
z: jspb.Message.getFieldWithDefault(msg, 2, 0),
resolution: jspb.Message.getFieldWithDefault(msg, 3, 0),
heightmap: msg.getHeightmap_asB64(),
isCached: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
workerId: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.terrain.TerrainTileResponse}
 */
proto.terrain.TerrainTileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.terrain.TerrainTileResponse;
  return proto.terrain.TerrainTileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.terrain.TerrainTileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.terrain.TerrainTileResponse}
 */
proto.terrain.TerrainTileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZ(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResolution(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeightmap(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCached(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.terrain.TerrainTileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.terrain.TerrainTileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.terrain.TerrainTileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.terrain.TerrainTileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getZ();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getResolution();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getHeightmap_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getIsCached();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getWorkerId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.terrain.TerrainTileResponse.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainTileResponse} returns this
 */
proto.terrain.TerrainTileResponse.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 z = 2;
 * @return {number}
 */
proto.terrain.TerrainTileResponse.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainTileResponse} returns this
 */
proto.terrain.TerrainTileResponse.prototype.setZ = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 resolution = 3;
 * @return {number}
 */
proto.terrain.TerrainTileResponse.prototype.getResolution = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainTileResponse} returns this
 */
proto.terrain.TerrainTileResponse.prototype.setResolution = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes heightmap = 4;
 * @return {!(string|Uint8Array)}
 */
proto.terrain.TerrainTileResponse.prototype.getHeightmap = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes heightmap = 4;
 * This is a type-conversion wrapper around `getHeightmap()`
 * @return {string}
 */
proto.terrain.TerrainTileResponse.prototype.getHeightmap_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHeightmap()));
};


/**
 * optional bytes heightmap = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeightmap()`
 * @return {!Uint8Array}
 */
proto.terrain.TerrainTileResponse.prototype.getHeightmap_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHeightmap()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.terrain.TerrainTileResponse} returns this
 */
proto.terrain.TerrainTileResponse.prototype.setHeightmap = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bool is_cached = 5;
 * @return {boolean}
 */
proto.terrain.TerrainTileResponse.prototype.getIsCached = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.terrain.TerrainTileResponse} returns this
 */
proto.terrain.TerrainTileResponse.prototype.setIsCached = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string worker_id = 6;
 * @return {string}
 */
proto.terrain.TerrainTileResponse.prototype.getWorkerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.terrain.TerrainTileResponse} returns this
 */
proto.terrain.TerrainTileResponse.prototype.setWorkerId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.terrain.TerrainChunkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.terrain.TerrainChunkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.terrain.TerrainChunkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.terrain.TerrainChunkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
centerX: jspb.Message.getFieldWithDefault(msg, 1, 0),
centerZ: jspb.Message.getFieldWithDefault(msg, 2, 0),
radius: jspb.Message.getFieldWithDefault(msg, 3, 0),
resolution: jspb.Message.getFieldWithDefault(msg, 4, 0),
lod: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.terrain.TerrainChunkRequest}
 */
proto.terrain.TerrainChunkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.terrain.TerrainChunkRequest;
  return proto.terrain.TerrainChunkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.terrain.TerrainChunkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.terrain.TerrainChunkRequest}
 */
proto.terrain.TerrainChunkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCenterX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCenterZ(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRadius(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResolution(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.terrain.TerrainChunkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.terrain.TerrainChunkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.terrain.TerrainChunkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.terrain.TerrainChunkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCenterX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCenterZ();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRadius();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getResolution();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getLod();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 center_x = 1;
 * @return {number}
 */
proto.terrain.TerrainChunkRequest.prototype.getCenterX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainChunkRequest} returns this
 */
proto.terrain.TerrainChunkRequest.prototype.setCenterX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 center_z = 2;
 * @return {number}
 */
proto.terrain.TerrainChunkRequest.prototype.getCenterZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainChunkRequest} returns this
 */
proto.terrain.TerrainChunkRequest.prototype.setCenterZ = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 radius = 3;
 * @return {number}
 */
proto.terrain.TerrainChunkRequest.prototype.getRadius = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainChunkRequest} returns this
 */
proto.terrain.TerrainChunkRequest.prototype.setRadius = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 resolution = 4;
 * @return {number}
 */
proto.terrain.TerrainChunkRequest.prototype.getResolution = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainChunkRequest} returns this
 */
proto.terrain.TerrainChunkRequest.prototype.setResolution = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 lod = 5;
 * @return {number}
 */
proto.terrain.TerrainChunkRequest.prototype.getLod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainChunkRequest} returns this
 */
proto.terrain.TerrainChunkRequest.prototype.setLod = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.terrain.TerrainChunkResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.terrain.TerrainChunkResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.terrain.TerrainChunkResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.terrain.TerrainChunkResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.terrain.TerrainChunkResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
tilesList: jspb.Message.toObjectList(msg.getTilesList(),
    proto.terrain.TerrainTileResponse.toObject, includeInstance),
totalTiles: jspb.Message.getFieldWithDefault(msg, 2, 0),
generatedTiles: jspb.Message.getFieldWithDefault(msg, 3, 0),
cachedTiles: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.terrain.TerrainChunkResponse}
 */
proto.terrain.TerrainChunkResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.terrain.TerrainChunkResponse;
  return proto.terrain.TerrainChunkResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.terrain.TerrainChunkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.terrain.TerrainChunkResponse}
 */
proto.terrain.TerrainChunkResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.terrain.TerrainTileResponse;
      reader.readMessage(value,proto.terrain.TerrainTileResponse.deserializeBinaryFromReader);
      msg.addTiles(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalTiles(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGeneratedTiles(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCachedTiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.terrain.TerrainChunkResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.terrain.TerrainChunkResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.terrain.TerrainChunkResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.terrain.TerrainChunkResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.terrain.TerrainTileResponse.serializeBinaryToWriter
    );
  }
  f = message.getTotalTiles();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getGeneratedTiles();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCachedTiles();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * repeated TerrainTileResponse tiles = 1;
 * @return {!Array<!proto.terrain.TerrainTileResponse>}
 */
proto.terrain.TerrainChunkResponse.prototype.getTilesList = function() {
  return /** @type{!Array<!proto.terrain.TerrainTileResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.terrain.TerrainTileResponse, 1));
};


/**
 * @param {!Array<!proto.terrain.TerrainTileResponse>} value
 * @return {!proto.terrain.TerrainChunkResponse} returns this
*/
proto.terrain.TerrainChunkResponse.prototype.setTilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.terrain.TerrainTileResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.terrain.TerrainTileResponse}
 */
proto.terrain.TerrainChunkResponse.prototype.addTiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.terrain.TerrainTileResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.terrain.TerrainChunkResponse} returns this
 */
proto.terrain.TerrainChunkResponse.prototype.clearTilesList = function() {
  return this.setTilesList([]);
};


/**
 * optional int32 total_tiles = 2;
 * @return {number}
 */
proto.terrain.TerrainChunkResponse.prototype.getTotalTiles = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainChunkResponse} returns this
 */
proto.terrain.TerrainChunkResponse.prototype.setTotalTiles = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 generated_tiles = 3;
 * @return {number}
 */
proto.terrain.TerrainChunkResponse.prototype.getGeneratedTiles = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainChunkResponse} returns this
 */
proto.terrain.TerrainChunkResponse.prototype.setGeneratedTiles = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 cached_tiles = 4;
 * @return {number}
 */
proto.terrain.TerrainChunkResponse.prototype.getCachedTiles = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainChunkResponse} returns this
 */
proto.terrain.TerrainChunkResponse.prototype.setCachedTiles = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.terrain.TerrainParametersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.terrain.TerrainParametersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.terrain.TerrainParametersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.terrain.TerrainParametersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
scale: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
amplitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
octaves: jspb.Message.getFieldWithDefault(msg, 3, 0),
persistence: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
lacunarity: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
seed: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.terrain.TerrainParametersRequest}
 */
proto.terrain.TerrainParametersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.terrain.TerrainParametersRequest;
  return proto.terrain.TerrainParametersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.terrain.TerrainParametersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.terrain.TerrainParametersRequest}
 */
proto.terrain.TerrainParametersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmplitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOctaves(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPersistence(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLacunarity(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.terrain.TerrainParametersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.terrain.TerrainParametersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.terrain.TerrainParametersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.terrain.TerrainParametersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScale();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getAmplitude();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getOctaves();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPersistence();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getLacunarity();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getSeed();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional float scale = 1;
 * @return {number}
 */
proto.terrain.TerrainParametersRequest.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainParametersRequest} returns this
 */
proto.terrain.TerrainParametersRequest.prototype.setScale = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float amplitude = 2;
 * @return {number}
 */
proto.terrain.TerrainParametersRequest.prototype.getAmplitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainParametersRequest} returns this
 */
proto.terrain.TerrainParametersRequest.prototype.setAmplitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int32 octaves = 3;
 * @return {number}
 */
proto.terrain.TerrainParametersRequest.prototype.getOctaves = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainParametersRequest} returns this
 */
proto.terrain.TerrainParametersRequest.prototype.setOctaves = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float persistence = 4;
 * @return {number}
 */
proto.terrain.TerrainParametersRequest.prototype.getPersistence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainParametersRequest} returns this
 */
proto.terrain.TerrainParametersRequest.prototype.setPersistence = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float lacunarity = 5;
 * @return {number}
 */
proto.terrain.TerrainParametersRequest.prototype.getLacunarity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainParametersRequest} returns this
 */
proto.terrain.TerrainParametersRequest.prototype.setLacunarity = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional int32 seed = 6;
 * @return {number}
 */
proto.terrain.TerrainParametersRequest.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainParametersRequest} returns this
 */
proto.terrain.TerrainParametersRequest.prototype.setSeed = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.terrain.TerrainParametersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.terrain.TerrainParametersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.terrain.TerrainParametersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.terrain.TerrainParametersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.terrain.TerrainParametersResponse}
 */
proto.terrain.TerrainParametersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.terrain.TerrainParametersResponse;
  return proto.terrain.TerrainParametersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.terrain.TerrainParametersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.terrain.TerrainParametersResponse}
 */
proto.terrain.TerrainParametersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.terrain.TerrainParametersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.terrain.TerrainParametersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.terrain.TerrainParametersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.terrain.TerrainParametersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.terrain.TerrainParametersResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.terrain.TerrainParametersResponse} returns this
 */
proto.terrain.TerrainParametersResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.terrain.TerrainParametersResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.terrain.TerrainParametersResponse} returns this
 */
proto.terrain.TerrainParametersResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.terrain.TerrainStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.terrain.TerrainStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.terrain.TerrainStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.terrain.TerrainStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
centerX: jspb.Message.getFieldWithDefault(msg, 1, 0),
centerZ: jspb.Message.getFieldWithDefault(msg, 2, 0),
viewDistance: jspb.Message.getFieldWithDefault(msg, 3, 0),
highPriority: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.terrain.TerrainStreamRequest}
 */
proto.terrain.TerrainStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.terrain.TerrainStreamRequest;
  return proto.terrain.TerrainStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.terrain.TerrainStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.terrain.TerrainStreamRequest}
 */
proto.terrain.TerrainStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCenterX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCenterZ(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setViewDistance(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHighPriority(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.terrain.TerrainStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.terrain.TerrainStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.terrain.TerrainStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.terrain.TerrainStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCenterX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCenterZ();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getViewDistance();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getHighPriority();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional int32 center_x = 1;
 * @return {number}
 */
proto.terrain.TerrainStreamRequest.prototype.getCenterX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainStreamRequest} returns this
 */
proto.terrain.TerrainStreamRequest.prototype.setCenterX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 center_z = 2;
 * @return {number}
 */
proto.terrain.TerrainStreamRequest.prototype.getCenterZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainStreamRequest} returns this
 */
proto.terrain.TerrainStreamRequest.prototype.setCenterZ = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 view_distance = 3;
 * @return {number}
 */
proto.terrain.TerrainStreamRequest.prototype.getViewDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.terrain.TerrainStreamRequest} returns this
 */
proto.terrain.TerrainStreamRequest.prototype.setViewDistance = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool high_priority = 4;
 * @return {boolean}
 */
proto.terrain.TerrainStreamRequest.prototype.getHighPriority = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.terrain.TerrainStreamRequest} returns this
 */
proto.terrain.TerrainStreamRequest.prototype.setHighPriority = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


goog.object.extend(exports, proto.terrain);
